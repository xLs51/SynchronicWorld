@model SynchronicWorld.Models.Event

@{
    ViewBag.Title = "Create";
    HttpCookie cookie = Request.Cookies["User"];

    if (cookie == null)
    {
        Response.Redirect(Url.Action("Index", "Home"));
    }
    else
    {
        ViewBag.Userid = cookie["UserId"];
    }
}

<h2>Create</h2>

@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>Event</h4>
        <hr />
        @Html.ValidationSummary(true)

        <div class="form-group">
            @Html.LabelFor(model => model.Name, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name)
                @Html.ValidationMessageFor(model => model.Name)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Address, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Address)
                @Html.ValidationMessageFor(model => model.Address)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Description, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Description)
                @Html.ValidationMessageFor(model => model.Description)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Date, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Date) Format (dd/mm/yyyy hh:mm:ss)
                @Html.ValidationMessageFor(model => model.Date)
            </div>
        </div>
        
        <div class="form-group">
            @Html.LabelFor(model => model.TypeEventId, "Type", new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("TypeEventId", String.Empty)
                @Html.ValidationMessageFor(model => model.TypeEventId)
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-10">
                An administrator have to validate your Event before you can send it to your friend !
            </div>
        </div>
      
        <input data-val="true" data-val-required="Le champ Status est requis." name="Status" type="hidden" value="Pending" />
        <input data-val="true" data-val-number="The field CreatorId must be a number." data-val-required="Le champ CreatorId est requis." name="CreatorId" type="hidden" value="@ViewBag.Userid" />

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>
